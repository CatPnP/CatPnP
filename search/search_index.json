{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Catapult PnP GitHub This repository public repository to facilitate access to Catapult's private GitHub repositories. Catapult is modeling its collaboration on development artifacts after the success maintained with Microsoft's PnP community and its use of GitHub. Below is a list of the current repositories and links to the Request Access form for each. Repositories CatPowerShell - This repo is intended to share and collaborate on PowerShell scripts.","title":"Home"},{"location":"#catapult-pnp-github","text":"This repository public repository to facilitate access to Catapult's private GitHub repositories. Catapult is modeling its collaboration on development artifacts after the success maintained with Microsoft's PnP community and its use of GitHub. Below is a list of the current repositories and links to the Request Access form for each.","title":"Catapult PnP GitHub"},{"location":"#repositories","text":"CatPowerShell - This repo is intended to share and collaborate on PowerShell scripts.","title":"Repositories"},{"location":"CatPowerShell/CatPowerShell/","text":"CatPowershell Overview Blah Blah Blah Links & Stuff...","title":"CatPowershell Overview"},{"location":"CatPowerShell/CatPowerShell/#catpowershell-overview","text":"Blah Blah Blah Links & Stuff...","title":"CatPowershell Overview"},{"location":"CatPowerShell/ClientUse/","text":"Client Use There are 2 brands of scripting that Catapult does with it's clients and this repo is intended to help us share those scripting scenarios with the broader Catapult consulting base. Consulting Service The primary use of this library is to support our consulting services and client delivery. When you are on a client project you can fork this repo and even sync it with get to have the scripts local on a client server when necessary. When using these scripts in a project scenario you are likely to generate log files, output files, input files or all of th above. Please do not check these files in to the repo or remove them prior doing a pull request and merging you changes/improvements. In all of our projects where these scripts are used there should be estimated effort for improvements. Typically the scripting bucket is larger than actually required to run the scripts. This is by design the hope is that consultants have budget to improve these scripts with every client use. Estimates should be less time than the original creation of the script, but enough time to make improvements. The over arching goal is a state of continues improvement through our client engagements. When you are done with your client engagement (unless otherwise included in project deliverables) the repo should be deleted from our client servers when necessary. It is also good to clean up the windows credential manager for any git or github credentials. A common exception to this is when we have an ongoing & regular relationship with the client (IE. Managed Services), in this scenario we should remember to clean this up when the relationship is terminated by the client. As a Deliverable Often our clients ask us to make a script specifically for them. If one doesn't exist, please Make a new Script and build it initially to be fully integrated with our repo. Once the script is completed and tested then create a copy in the Stand Alone folder. In the stand alone folder you can then remove the functions or add them to the script file directly. This way we build out the repo while also meeting our client needs. It is understood that this may take a little \"extra\" time and our estimates should accommodate this, but it is of a huge benefit to the Catapult organization.","title":"Client Use"},{"location":"CatPowerShell/ClientUse/#client-use","text":"There are 2 brands of scripting that Catapult does with it's clients and this repo is intended to help us share those scripting scenarios with the broader Catapult consulting base.","title":"Client Use"},{"location":"CatPowerShell/ClientUse/#consulting-service","text":"The primary use of this library is to support our consulting services and client delivery. When you are on a client project you can fork this repo and even sync it with get to have the scripts local on a client server when necessary. When using these scripts in a project scenario you are likely to generate log files, output files, input files or all of th above. Please do not check these files in to the repo or remove them prior doing a pull request and merging you changes/improvements. In all of our projects where these scripts are used there should be estimated effort for improvements. Typically the scripting bucket is larger than actually required to run the scripts. This is by design the hope is that consultants have budget to improve these scripts with every client use. Estimates should be less time than the original creation of the script, but enough time to make improvements. The over arching goal is a state of continues improvement through our client engagements. When you are done with your client engagement (unless otherwise included in project deliverables) the repo should be deleted from our client servers when necessary. It is also good to clean up the windows credential manager for any git or github credentials. A common exception to this is when we have an ongoing & regular relationship with the client (IE. Managed Services), in this scenario we should remember to clean this up when the relationship is terminated by the client.","title":"Consulting Service"},{"location":"CatPowerShell/ClientUse/#as-a-deliverable","text":"Often our clients ask us to make a script specifically for them. If one doesn't exist, please Make a new Script and build it initially to be fully integrated with our repo. Once the script is completed and tested then create a copy in the Stand Alone folder. In the stand alone folder you can then remove the functions or add them to the script file directly. This way we build out the repo while also meeting our client needs. It is understood that this may take a little \"extra\" time and our estimates should accommodate this, but it is of a huge benefit to the Catapult organization.","title":"As a Deliverable"},{"location":"CatPowerShell/Contribution/","text":"Contributing to Catapult's Productivity PowerShell Repository CatPnP is intended to be modeled after the broader community PnP GitHub repositories and the Sharing is Caring initiative. The intent is that if you are familiar with contributing to the broader community then you are also able to contribute to the Catapult community. Honor System Catapult is leveraging the free version of GitHub which allows us to have unlimited contributors, but doesn't allow us to enforce approval on commits and pull requests. For this reason, when you are looking to fix something, add a new script or contribute in any fashion please create a fork of the repo to ensure that changes can be tracked and reviewed when merging. GitHub will allow all of our contributors to approve their own pull requests also. We ask users not to approve your own requests. We will try and review them as quickly as possible to ensure the goodness that you have contributed gets shared quickly & effectively with the rest of the organization.","title":"Contributing to Catapult's Productivity PowerShell Repository"},{"location":"CatPowerShell/Contribution/#contributing-to-catapults-productivity-powershell-repository","text":"CatPnP is intended to be modeled after the broader community PnP GitHub repositories and the Sharing is Caring initiative. The intent is that if you are familiar with contributing to the broader community then you are also able to contribute to the Catapult community.","title":"Contributing to Catapult's Productivity PowerShell Repository"},{"location":"CatPowerShell/Contribution/#honor-system","text":"Catapult is leveraging the free version of GitHub which allows us to have unlimited contributors, but doesn't allow us to enforce approval on commits and pull requests. For this reason, when you are looking to fix something, add a new script or contribute in any fashion please create a fork of the repo to ensure that changes can be tracked and reviewed when merging. GitHub will allow all of our contributors to approve their own pull requests also. We ask users not to approve your own requests. We will try and review them as quickly as possible to ensure the goodness that you have contributed gets shared quickly & effectively with the rest of the organization.","title":"Honor System"},{"location":"CatPowerShell/Documentation/","text":"Catapult Productivity PowerShell Repository This repository contains a culmination of scripts used throughout Catapult consulting delivery services. This repository is open for contribution to resources within Catapult's Productivity Practice and CoP. Below is an outline of how this repository is structured. If you have any issues or would like to discuss any major or philosophical changes to the repository, please reach out to: Nick Patterson - Nick.Patterson@catapultsystems.com Richard Toland - Richard.Toland@catapultsystems.com David Warner - David.Warner@catapultsystems.com Nick Brown - Nick.Brown@catapultsystems.com Here is some of the documentation for this repository. If you see any mistakes or have additional details you would like to add, please update as necessary! Using repository with my clients Contributing to this repository Repository organization Creating new scripts Naming Conventions","title":"Documentation"},{"location":"CatPowerShell/Documentation/#catapult-productivity-powershell-repository","text":"This repository contains a culmination of scripts used throughout Catapult consulting delivery services. This repository is open for contribution to resources within Catapult's Productivity Practice and CoP. Below is an outline of how this repository is structured. If you have any issues or would like to discuss any major or philosophical changes to the repository, please reach out to: Nick Patterson - Nick.Patterson@catapultsystems.com Richard Toland - Richard.Toland@catapultsystems.com David Warner - David.Warner@catapultsystems.com Nick Brown - Nick.Brown@catapultsystems.com Here is some of the documentation for this repository. If you see any mistakes or have additional details you would like to add, please update as necessary! Using repository with my clients Contributing to this repository Repository organization Creating new scripts Naming Conventions","title":"Catapult Productivity PowerShell Repository"},{"location":"CatPowerShell/Naming/","text":"Naming Conventions Please follow the following naming convention for scripts in this repository. Folders Folders in this repo act as \"categories\" or \"types\" of scripts. Please make them clear and concise. Ideally folders should be general enough to describe multiple scripts not just the new script being created. Integrated Scripts All scripts and functions should follow the below naming convention. Cat.{Tech}-{ScriptName}.ps1 There is flexibility around both the script name and the technology. As long as the script name is descriptive enough for people to know what it does. The following technology abbreviations are currently in use. If you have a new one, please update this documentation. PnP - Leverages PnP PowerShell modules. You may need to update your modules based on the version of SharePoint. SP10 - Designed for SharePoint 2010 server powershell modules SP13 - Designed for SharePoint 2013 server powershell modules SP16 - Designed for SharePoint 2016 server powershell modules SP19 - Designed for SharePoint 2019 server powershell modules SPO - Designed for SharePoint Online powershell modules m365 - This technology is used because the script covers multiple Microsoft cloud modules/technologies. IE Azure, SPO, Teams, Etc. AD - Designed for the on premises Active Directory modules CM - Designed to work with Content Matrix for migrations GIT - Script for common Git commands in GitBash PS - General PowerShell scripts Integrated Functions Similar to scripts, functions should follow a very similar naming convention. Cat.{tech}-{FunctionName}.psm1 Inside the psm1 file functions should follow the below naming convention. Updating this is in progress to help standardize. {Action}-Cat{FunctionName} For categories that have a functions folder there is also a Cat.{Category}Functions.psm1 file that is intended to load all functions from that category. Stand Alone Scripts Stand alone script should follow a similar naming convention when providing to the client. {Client}.{Tech}-{ScriptName}.ps1 After a script has been provided to the client and before you do a pull request in to the main repo please do a find & replace in the file to replace the client name with \"{Client}\". Do the same for the file name to make it more generic for the general repo.","title":"Naming Conventions"},{"location":"CatPowerShell/Naming/#naming-conventions","text":"Please follow the following naming convention for scripts in this repository.","title":"Naming Conventions"},{"location":"CatPowerShell/Naming/#folders","text":"Folders in this repo act as \"categories\" or \"types\" of scripts. Please make them clear and concise. Ideally folders should be general enough to describe multiple scripts not just the new script being created.","title":"Folders"},{"location":"CatPowerShell/Naming/#integrated-scripts","text":"All scripts and functions should follow the below naming convention. Cat.{Tech}-{ScriptName}.ps1 There is flexibility around both the script name and the technology. As long as the script name is descriptive enough for people to know what it does. The following technology abbreviations are currently in use. If you have a new one, please update this documentation. PnP - Leverages PnP PowerShell modules. You may need to update your modules based on the version of SharePoint. SP10 - Designed for SharePoint 2010 server powershell modules SP13 - Designed for SharePoint 2013 server powershell modules SP16 - Designed for SharePoint 2016 server powershell modules SP19 - Designed for SharePoint 2019 server powershell modules SPO - Designed for SharePoint Online powershell modules m365 - This technology is used because the script covers multiple Microsoft cloud modules/technologies. IE Azure, SPO, Teams, Etc. AD - Designed for the on premises Active Directory modules CM - Designed to work with Content Matrix for migrations GIT - Script for common Git commands in GitBash PS - General PowerShell scripts","title":"Integrated Scripts"},{"location":"CatPowerShell/Naming/#integrated-functions","text":"Similar to scripts, functions should follow a very similar naming convention. Cat.{tech}-{FunctionName}.psm1 Inside the psm1 file functions should follow the below naming convention. Updating this is in progress to help standardize. {Action}-Cat{FunctionName} For categories that have a functions folder there is also a Cat.{Category}Functions.psm1 file that is intended to load all functions from that category.","title":"Integrated Functions"},{"location":"CatPowerShell/Naming/#stand-alone-scripts","text":"Stand alone script should follow a similar naming convention when providing to the client. {Client}.{Tech}-{ScriptName}.ps1 After a script has been provided to the client and before you do a pull request in to the main repo please do a find & replace in the file to replace the client name with \"{Client}\". Do the same for the file name to make it more generic for the general repo.","title":"Stand Alone Scripts"},{"location":"CatPowerShell/NewScripts/","text":"Creating New Scripts To help make creating new scripts and functions easier while keeping them consistant 2 script templates have been created that you can copy and paste into the proper category folder for your new script. Cat.{tech}--{FunctionName}.psm1 Cat.{tech}-{ScriptName}.ps1 The intent for these files is to keep our scripting best practices inside these file to give every script the same starting point. As our best practices change, these files should be updated for future use. New Functions For categories that have a functions folder there is also a Cat.{Category}Functions.psm1 file that is intended to load all functions from that category. If you create new functions, please ensure that the new functions is added to the category specific functions module. Documentation We ask that all scripts be documented in a comments section at the start of the script the comments section should consist of the following information. Name Description Dependencies - Modules & tools that may need to be installed Potential enhancements that you may not have had time to implement Table of Contents Please follow the contribution standards and naming conventions when creating new Scripts.","title":"Creating New Scripts"},{"location":"CatPowerShell/NewScripts/#creating-new-scripts","text":"To help make creating new scripts and functions easier while keeping them consistant 2 script templates have been created that you can copy and paste into the proper category folder for your new script. Cat.{tech}--{FunctionName}.psm1 Cat.{tech}-{ScriptName}.ps1 The intent for these files is to keep our scripting best practices inside these file to give every script the same starting point. As our best practices change, these files should be updated for future use.","title":"Creating New Scripts"},{"location":"CatPowerShell/NewScripts/#new-functions","text":"For categories that have a functions folder there is also a Cat.{Category}Functions.psm1 file that is intended to load all functions from that category. If you create new functions, please ensure that the new functions is added to the category specific functions module.","title":"New Functions"},{"location":"CatPowerShell/NewScripts/#documentation","text":"We ask that all scripts be documented in a comments section at the start of the script the comments section should consist of the following information. Name Description Dependencies - Modules & tools that may need to be installed Potential enhancements that you may not have had time to implement Table of Contents Please follow the contribution standards and naming conventions when creating new Scripts.","title":"Documentation"},{"location":"CatPowerShell/Organization/","text":"Repository Organization This repository is structured into folders intended to define the category or use of the scripts & functions inside of them. Each folder has a readme.md file that should be used to explain the intent behind that directory. Documentation The _Documentation folder should be used for repository documentation outside of the individual readme files in each directory. As you add necessary content feel free to add additional directories to group your documentation. As a best practice please try to think about what documentation should be created or updated based on your contributions. Input, Output, Templates & Log Files The _Input Files , _Output Files , & _Log Files folders are intended to store input, output log files, etc. The scripts in this repository should all be configured to look for the provide input files (\"sample.json\") in the root of _Input Files . Files that reside in the sub folders can also be referenced by providing the sub folder name (\"Testing\\sample.json\"). The reporting scripts use _Output Files to store the data being collected by the scripts. All Scripts should leverage PowerShell's transcript capability to log everything that is output to the screen in the _Log Files folder. This is especially helpful for long running scripts that you may not see all the errors when they happen. Not that my scripts ever have errors =) Script Categories / Functions This repository is primarily organized into type/categories (IE. Configuration). Each category folder should have a Readme file to help outline the purpose for that directory. In each category folder there is also a Functions folder. Functions Inside the functions folder each reusable function is in it's own dedicated file. There is then a category functions file (Cat.ConfigurationFunctions.psm1) that should reference all functions that live in that category. This allows all scripts the ability to load all functions within a single command or just load the individual function that is required.","title":"Repository Organization"},{"location":"CatPowerShell/Organization/#repository-organization","text":"This repository is structured into folders intended to define the category or use of the scripts & functions inside of them. Each folder has a readme.md file that should be used to explain the intent behind that directory.","title":"Repository Organization"},{"location":"CatPowerShell/Organization/#documentation","text":"The _Documentation folder should be used for repository documentation outside of the individual readme files in each directory. As you add necessary content feel free to add additional directories to group your documentation. As a best practice please try to think about what documentation should be created or updated based on your contributions.","title":"Documentation"},{"location":"CatPowerShell/Organization/#input-output-templates-log-files","text":"The _Input Files , _Output Files , & _Log Files folders are intended to store input, output log files, etc. The scripts in this repository should all be configured to look for the provide input files (\"sample.json\") in the root of _Input Files . Files that reside in the sub folders can also be referenced by providing the sub folder name (\"Testing\\sample.json\"). The reporting scripts use _Output Files to store the data being collected by the scripts. All Scripts should leverage PowerShell's transcript capability to log everything that is output to the screen in the _Log Files folder. This is especially helpful for long running scripts that you may not see all the errors when they happen. Not that my scripts ever have errors =)","title":"Input, Output, Templates &amp; Log Files"},{"location":"CatPowerShell/Organization/#script-categories-functions","text":"This repository is primarily organized into type/categories (IE. Configuration). Each category folder should have a Readme file to help outline the purpose for that directory. In each category folder there is also a Functions folder.","title":"Script Categories / Functions"},{"location":"CatPowerShell/Organization/#functions","text":"Inside the functions folder each reusable function is in it's own dedicated file. There is then a category functions file (Cat.ConfigurationFunctions.psm1) that should reference all functions that live in that category. This allows all scripts the ability to load all functions within a single command or just load the individual function that is required.","title":"Functions"}]}